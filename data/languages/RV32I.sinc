:lui rd, UImm is opcode=0b0110111 & rd & UImm { rd = UImm; }
:auipc rd, UImm is opcode=0b0010111 & rd & UImm { rd =inst_start + UImm; }

:jal rd, JRel is opcode=0b1101111 & rd & JRel {
	rd = inst_next;
	call JRel;
}

:j JRel is opcode=0b1101111 & rd=0 & JRel {
	goto JRel;
}

:call JRel is opcode=0b1101111 & rd=1 & JRel {
	ra = inst_next;
	call JRel;
}

:jalr rd, IImm(rs1) is opcode=0b1100111 & funct3=000 & rd & rs1 & IImm {
	local tmp = sext(IImm);
	rd = inst_next;
	local target = rs1 + tmp;
	call [target];
}

:ret is opcode=0b1100111 & funct3=000 & rd=0 & rs1=1 & imm11_0=0 {
	return [ra];
}

:beq rs1, rs2, BRel is opcode=0b1100011 & funct3=0b000 & rs1 & rs2 & BRel {
	if (rs1 == rs2) goto BRel;
}

:bne rs1, rs2, BRel is opcode=0b1100011 & funct3=0b001 & rs1 & rs2 & BRel {
	if (rs1 != rs2) goto BRel;
}

:blt rs1, rs2, BRel is opcode=0b1100011 & funct3=0b100 & rs1 & rs2 & BRel {
	if (rs1 s< rs2) goto BRel;
}

:bge rs1, rs2, BRel is opcode=0b1100011 & funct3=0b101 & rs1 & rs2 & BRel {
	if (rs1 s>= rs2) goto BRel;
}

:bltu rs1, rs2, BRel is opcode=0b1100011 & funct3=0b110 & rs1 & rs2 & BRel {
	if (rs1 < rs2) goto BRel;
}

:bgeu rs1, rs2, BRel is opcode=0b1100011 & funct3=0b111 & rs1 & rs2 & BRel {
	if (rs1 >= rs2) goto BRel;
}

:lb rd, IImm(rs1) is opcode=0b0000011 & funct3=0b000 & rd & rs1 & IImm {
	local tmp = rs1 + sext(IImm);
	rd = sext(*[ram]:1 tmp);
}

:lh rd, IImm(rs1) is opcode=0b0000011 & funct3=0b001 & rd & rs1 & IImm {
	local tmp = rs1 + sext(IImm);
	rd = sext(*[ram]:2 tmp);
}

:lw rd, IImm(rs1) is opcode=0b0000011 & funct3=0b010 & rd & rs1 & IImm {
	local tmp = rs1 + sext(IImm);
	rd = *[ram]:4 tmp;
}

:lbu rd, IImm(rs1) is opcode=0b0000011 & funct3=0b100 & rd & rs1 & IImm {
	local tmp = rs1 + sext(IImm);
	rd = zext( *[ram]:1 tmp );
}

:lhu rd, IImm(rs1) is opcode=0b0000011 & funct3=0b101 & rd & rs1 & IImm {
	local tmp = rs1 + sext(IImm);
	rd = zext( *[ram]:2 tmp );
}

:sb rs2, SImm(rs1) is opcode=0b0100011 & funct3=0b000 & rs1 & rs2 & SImm {
	local tmp = rs1 + sext(SImm);
	*[ram]:1 tmp = rs2;
}

:sh rs2, SImm(rs1) is opcode=0b0100011 & funct3=0b001 & rs1 & rs2 & SImm {
	local tmp = rs1 + sext(SImm);
	*[ram]:2 tmp = rs2;
}

:sw rs2, SImm(rs1) is opcode=0b0100011 & funct3=0b010 & rs1 & rs2 & SImm {
	local tmp = rs1 + sext(SImm);
	*[ram]:4 tmp = rs2;
}

:addi rd, rs1, IImm is opcode=0b0010011 & funct3=0b000 & rd & rs1 & IImm {
	rd = rs1 + sext(IImm);
}

# addi pseudo-instructions
:mv rd, rs1 is opcode=0b0010011 & funct3=0b000 & rd & rs1 & imm11_0=0 {
	rd = rs1;
}

:nop is opcode=0b0010011 & funct3=0b000 & rd=0 & rs1=0 & imm11_0=0 {

}

:li rd, IImm is opcode=0b0010011 & funct3=0b000 & rd & rs1=zero & IImm {
	rd = sext(IImm);
}

:slti rd, rs1, IImm is opcode=0b0010011 & funct3=0b010 & rd & rs1 & IImm {
	if (rs1 s< IImm) goto <set1>;
	rd = 0;
	goto inst_next;
  <set1>
  	rd = 1;
}

:sltiu rd, rs1, IImm is opcode=0b0010011 & funct3=0b011 & rd & rs1 & IImm {
	if (rs1 < zext(IImm)) goto <set1>;
	rd = 0;
	goto inst_next;
  <set1>
  	rd = 1;
}

:xori rd, rs1, IImm is opcode=0b0010011 & funct3=0b100 & rd & rs1 & IImm {
	rd = rs1 ^ sext(IImm);
}

:ori rd, rs1, IImm is opcode=0b0010011 & funct3=0b110 & rd & rs1 & IImm {
	rd = rs1 | sext(IImm);
}

:andi rd, rs1, IImm is opcode=0b0010011 & funct3=0b111 & rd & rs1 & IImm {
	rd = rs1 & sext(IImm);
}

:slli rd, rs1, shamt is opcode=0b0010011 & funct3=0b001 & funct7=0b0000000 & rd & rs1 & shamt {
	rd = rs1 << shamt;
}

:srli rd, rs1, shamt is opcode=0b0010011 & funct3=0b101 & funct7=0b0000000 & rd & rs1 & shamt {
	rd = rs1 >> shamt;
}

:srai rd, rs1, shamt is opcode=0b0010011 & funct3=0b101 & funct7=0b0100000 & rd & rs1 & shamt {
	rd = rs1 s>> shamt;
}

:add rd, rs1, rs2 is opcode=0b0110011 & funct3=0b000 & funct7=0b0000000 & rd & rs1 & rs2 {
	rd = rs1 + rs2;
}

:sub rd, rs1, rs2 is opcode=0b0110011 & funct3=0b000 & funct7=0b0100000 & rd & rs1 & rs2 {
	rd = rs1 - rs2;
}

:neg rd, rs2 is opcode=0b0110011 & funct3=0b000 & funct7=0b0100000 & rd & rs1=0 & rs2 {
	rd = -rs2;
}

:sll rd, rs1, rs2 is opcode=0b0110011 & funct3=0b001 & funct7=0b0000000 & rd & rs1 & rs2 {
	rd = rs1 >> (rs2 & 0x1F);
}

:slt rd, rs1, rs2 is opcode=0b0110011 & funct3=0b010 & funct7=0b0000000 & rd & rs1 & rs2 {
	if (rs1 s< rs2) goto <set1>;
	rd = 0;
	goto inst_next;
  <set1>
  	rd = 1;
}

:sltu rd, rs1, rs2 is opcode=0b0110011 & funct3=0b011 & funct7=0b0000000 & rd & rs1 & rs2 {
	if (rs1 < rs2) goto <set1>;
	rd = 0;
	goto inst_next;
  <set1>
  	rd = 1;
}

:xor rd, rs1, rs2 is opcode=0b0110011 & funct3=0b100 & funct7=0b0000000 & rd & rs1 & rs2 {
	rd = rs1 ^ rs2;
}

:srl rd, rs1, rs2 is opcode=0b0110011 & funct3=0b101 & funct7=0b0000000 & rd & rs1 & rs2 {
	rd = rs1 >> rs2;
}

:sra rd, rs1, rs2 is opcode=0b0110011 & funct3=0b101 & funct7=0b0100000 & rd & rs1 & rs2 {
	rd = rs1 s>> rs2;
}

:or rd, rs1, rs2 is opcode=0b0110011 & funct3=0b110 & funct7=0b0000000 & rd & rs1 & rs2 {
	rd = rs1 | rs2;
}

:and rd, rs1, rs2 is opcode=0b0110011 & funct3=0b111 & funct7=0b0000000 & rd & rs1 & rs2 {
	rd = rs1 & rs2;
}

:ecall is opcode=0b1110011 & funct12=0 & rs1=0 & funct3=0 & rd=0 {
	ecall();
}

:ebreak is opcode=0b1110011 & funct12=1 & rs1=0 & funct3=0 & rd=0 {
	ebreak();
}